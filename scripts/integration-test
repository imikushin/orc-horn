#!/bin/bash
set -e

ETCD_SERVER=longhorn-orc-etcd-test-server
ETCD_IMAGE=quay.io/coreos/etcd:v3.1.5

function cleanup {
        set +e
        kill $pid_orc
        echo Stop etcd server
        docker rm -vf $ETCD_SERVER
}

cd $(dirname $0)/..

if [ ! -x ./bin/longhorn ]; then
    ./scripts/build
fi

echo Start etcd server
docker run -d --net container:$(hostname) \
            --name $ETCD_SERVER \
            --volume /etcd-data \
            $ETCD_IMAGE \
            /usr/local/bin/etcd \
            --name longhorn-test-etcd-1 \
            --data-dir /etcd-data \
            --listen-client-urls http://0.0.0.0:2379 \
            --advertise-client-urls http://0.0.0.0:2379 \
            --listen-peer-urls http://0.0.0.0:2380 \
            --initial-advertise-peer-urls http://0.0.0.0:2380 \
            --initial-cluster longhorn-test-etcd-1=http://0.0.0.0:2380 \
            --initial-cluster-token my-etcd-token \
            --initial-cluster-state new \
            --auto-compaction-retention 1
trap cleanup EXIT

ready=false

set +e
for i in `seq 1 5`
do
        sleep 1
        curl -sL --max-time 1 --fail --output /dev/null --silent http://127.0.0.1:2379/v2/stats/leader
        if [ $? -eq 0 ]
        then
                ready=true
                break
        fi
done
set -e

if [ "$ready" != true ]
then
        echo Fail to bring etcd server up
        exit 1
fi

hostip=`hostname -i`

./bin/longhorn-orc -d --orchestrator docker \
        --longhorn-image rancher/longhorn:latest \
        --etcd-servers http://localhost:2379 \
        --host-address ${hostip}:7000 &
sleep 1
pid_orc=$!

ps $pid_orc

cd integration
find -depth -name __pycache__ -o -name "*.pyc" -exec rm -rf {} \;
if [ -z "$NO_TEST" ]; then
    tox "$@"
fi
